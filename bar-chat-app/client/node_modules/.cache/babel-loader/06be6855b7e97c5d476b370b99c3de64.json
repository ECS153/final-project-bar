{"ast":null,"code":"import Web3 from 'web3';\nimport TruffleContract from 'truffle-contract';\nimport BarData from '../build/contracts/Bar.json'; // let BarJSON = require(\n// const fs = require('fs')\n// let BarData = fs.readFileSync('./build/contracts/Bar.json')\n\nclass Blockchain {\n  constructor() {\n    this.loading = false;\n    this.contracts = {};\n    this.web3Provider = null;\n    this.msgList = null;\n    this.load = this.load.bind(this);\n    this.loadWeb3 = this.loadWeb3.bind(this);\n    this.loadAccount = this.loadAccount.bind(this);\n    this.loadContract = this.loadContract.bind(this);\n    this.renderMsgs = this.renderMsgs.bind(this);\n    this.createMessage = this.createMessage.bind(this);\n  }\n\n  async load() {\n    await this.loadWeb3();\n    await this.loadAccount();\n    await this.loadContract(); //await this.render();\n  } // https://medium.com/metamask/https-medium-com-metamask-breaking-change-injecting-web3-7722797916a8\n  // connect blockchain to browser\n\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n\n      try {\n        window.ethereum.enable().then(function () {\n          // User has allowed account access to DApp...\n          console.log(\"account okay\");\n        });\n      } catch (e) {\n        // User has denied account access to DApp...\n        console.log(\"account denied\");\n      }\n    } // Legacy DApp Browsers\n    else if (window.web3) {\n        window.web3 = new Web3(window.web3.currentProvider);\n      } // Non-DApp Browsers\n      else {\n          alert('You have to install MetaMask !');\n        } // if (typeof window.web3 !== 'undefined') {\n    //     this.web3Provider = window.web3.currentProvider\n    //     window.web3 = new Web3(window.web3.currentProvider)\n    // } else {\n    //     window.alert(\"Please connect to Metamask.\")\n    // }\n    // // Modern dapp browsers...\n    // if (window.ethereum) {\n    //     window.web3 = new Web3(window.ethereum)\n    //     try {\n    //         // Request account access if needed\n    //         await window.ethereum.enable()\n    //         // Acccounts now exposed\n    //         window.web3.eth.sendTransaction({/* ... */})\n    //     } catch (error) {\n    //         // User denied account access...\n    //         console.log(\"user denied account access....\");\n    //     }\n    // }\n    // // Legacy dapp browsers...\n    // else if (window.web3) {\n    //     this.web3Provider = window.web3.currentProvider\n    //     window.web3 = new Web3(window.web3.currentProvider)\n    //     // Acccounts always exposed\n    //     window.web3.eth.sendTransaction({/* ... */})\n    // }\n    // // Non-dapp browsers...\n    // else {\n    //     console.log('Non-Ethereum browser detected. You should consider trying MetaMask!')\n    // }\n\n  }\n\n  async loadAccount() {\n    this.account = window.web3.eth.accounts[0];\n    console.log(this.account);\n  }\n\n  async loadContract() {\n    const msgList = BarData; //console.log(\"Msg LIST\")\n    //console.log(msgList);\n    // truffle contract - JS representation of a smart contract\n\n    this.contracts.Bar = TruffleContract(msgList);\n    this.contracts.Bar.setProvider(this.web3Provider); // get smart contract values from blockchain\n\n    this.msgList = await this.contracts.Bar.deployed().catch(error => console.log(error));\n    console.log(this.msgList);\n    console.log(\"done\");\n  }\n\n  async renderMsgs() {\n    // Load msg count from blockchain\n    const msgCount = await this.msgList.msgCount(); //const $msgTemplate = $('.msgTemplate')\n    // Render each message with a new message template\n\n    for (var i = 1; i <= msgCount; i++) {\n      // truffle contracts return an array\n      const msg = await this.msgList.messages(i);\n      const msgID = msg[0].toNumber();\n      const content = msg[1];\n      console.log(msgID);\n      console.log(content);\n    }\n  }\n\n  async createMessage(content) {\n    //this.setLoading(true)\n    console.log(content);\n    await this.msgList.createMessage(content);\n    this.renderMsgs();\n    window.location.reload();\n  }\n\n}\n\nconst Bar_app = {\n  loading: false,\n  contracts: {},\n  load: async () => {\n    await Bar_app.loadWeb3(); // load library to connect to blockchain\n\n    await Bar_app.loadAccount();\n    await Bar_app.loadContract();\n    await Bar_app.render();\n  },\n  // https://medium.com/metamask/https-medium-com-metamask-breaking-change-injecting-web3-7722797916a8\n  // connect blockchain to browser\n  loadWeb3: async () => {\n    if (typeof window.web3 !== 'undefined') {\n      Bar_app.web3Provider = window.web3.currentProvider;\n      window.web3 = new Web3(window.web3.currentProvider);\n    } else {\n      window.alert(\"Please connect to Metamask.\");\n    } // Modern dapp browsers...\n\n\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n\n      try {\n        // Request account access if needed\n        await window.ethereum.enable(); // Acccounts now exposed\n\n        window.web3.eth.sendTransaction({\n          /* ... */\n        });\n      } catch (error) {// User denied account access...\n      }\n    } // Legacy dapp browsers...\n    else if (window.web3) {\n        Bar_app.web3Provider = window.web3.currentProvider;\n        window.web3 = new Web3(window.web3.currentProvider); // Acccounts always exposed\n\n        window.web3.eth.sendTransaction({\n          /* ... */\n        });\n      } // Non-dapp browsers...\n      else {\n          console.log('Non-Ethereum browser detected. You should consider trying MetaMask!');\n        }\n  },\n  // end https://medium.com/metamask/https-medium-com-metamask-breaking-change-injecting-web3-7722797916a8\n  loadAccount: async () => {\n    Bar_app.account = window.web3.eth.accounts[0];\n    console.log(Bar_app.account);\n  },\n  loadContract: async () => {\n    const msgList = BarData;\n    console.log(\"Msg LIST\");\n    console.log(msgList); // truffle contract - JS representation of a smart contract\n\n    Bar_app.contracts.Bar = TruffleContract(msgList);\n    Bar_app.contracts.Bar.setProvider(Bar_app.web3Provider); // get smart contract values from blockchain\n\n    Bar_app.msgList = await Bar_app.contracts.Bar.deployed();\n  },\n  renderMsgs: async () => {\n    // Load msg count from blockchain\n    const msgCount = await Bar_app.msgList.msgCount(); //const $msgTemplate = $('.msgTemplate')\n    // Render each message with a new message template\n\n    for (var i = 1; i <= msgCount; i++) {\n      // truffle contracts return an array\n      const msg = await Bar_app.msgList.messages(i);\n      const msgID = msg[0].toNumber();\n      const content = msg[1];\n      console.log(msgID);\n      console.log(content); // Create the html for the task\n      //const $newMsgTemplate = $msgTemplate.clone()\n      //$newMsgTemplate.find('.content').html(content)\n      //$newMsgTemplate.find('input')\n      //.prop('name', msgID)\n      //.prop('checked', taskCompleted)\n      //.on('click', Bar_app.toggleCompleted)\n      //$('msgList').append($newMsgTemplate)\n      // Show the message\n      //$newMsgTemplate.show()\n    }\n  },\n  render: async () => {\n    if (Bar_app.loading) {\n      return;\n    }\n\n    Bar_app.setLoading(true); // $('#account').html(Bar_app.account)\n\n    await Bar_app.renderMsgs();\n    Bar_app.setLoading(false);\n  },\n  createMessage: async content => {\n    Bar_app.setLoading(true);\n    console.log(content); //const content = $('#newMsg').val()\n\n    await Bar_app.msgList.createMessage(content);\n    Bar_app.renderMsgs();\n    window.location.reload();\n  },\n  setLoading: boolean => {\n    Bar_app.loading = boolean; //const loader = $('#loader')\n    //const content = $('#content')\n    // if (boolean) {\n    //     loader.show()\n    //     content.hide()\n    // } else {\n    //     loader.hide()\n    //     content.show()\n    // }\n  }\n}; // $(() => {\n//     $(window).load(() => {\n//         bar_app.load()\n//     })\n// })\n//Bar_app.load();\n\nexport default new Blockchain();","map":{"version":3,"sources":["/Users/vsiow/Documents/UCD/S2020/final-project-bar/bar-chat-app/client/src/eth-bar/src/blockchain.js"],"names":["Web3","TruffleContract","BarData","Blockchain","constructor","loading","contracts","web3Provider","msgList","load","bind","loadWeb3","loadAccount","loadContract","renderMsgs","createMessage","window","ethereum","web3","enable","then","console","log","e","currentProvider","alert","account","eth","accounts","Bar","setProvider","deployed","catch","error","msgCount","i","msg","messages","msgID","toNumber","content","location","reload","Bar_app","render","sendTransaction","setLoading","boolean"],"mappings":"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","sourcesContent":["import Web3 from 'web3';  \nimport TruffleContract from 'truffle-contract' ;\nimport BarData from '../build/contracts/Bar.json'\n\n// let BarJSON = require(\n// const fs = require('fs')\n// let BarData = fs.readFileSync('./build/contracts/Bar.json')\n\nclass Blockchain {\n    constructor() {\n        this.loading = false;\n        this.contracts = {};\n        this.web3Provider = null;\n        this.msgList = null;\n        this.load = this.load.bind(this);\n        this.loadWeb3 = this.loadWeb3.bind(this);\n        this.loadAccount = this.loadAccount.bind(this);\n        this.loadContract = this.loadContract.bind(this);\n        this.renderMsgs = this.renderMsgs.bind(this);\n        this.createMessage = this.createMessage.bind(this);\n    }\n\n    async load() {\n        await this.loadWeb3();\n        await this.loadAccount();\n        await this.loadContract();\n        //await this.render();\n    }\n    // https://medium.com/metamask/https-medium-com-metamask-breaking-change-injecting-web3-7722797916a8\n    // connect blockchain to browser\n    async loadWeb3() {\n        if (window.ethereum) {\n            window.web3 = new Web3(window.ethereum);\n            try { \n                window.ethereum.enable().then(function() {\n                // User has allowed account access to DApp...\n                console.log(\"account okay\")\n            });\n            } catch(e) {\n                // User has denied account access to DApp...\n                console.log(\"account denied\")\n            }\n        }\n        // Legacy DApp Browsers\n        else if (window.web3) {\n            window.web3 = new Web3(window.web3.currentProvider);\n        }\n        // Non-DApp Browsers\n        else {\n            alert('You have to install MetaMask !');\n        }\n\n        \n        // if (typeof window.web3 !== 'undefined') {\n        //     this.web3Provider = window.web3.currentProvider\n        //     window.web3 = new Web3(window.web3.currentProvider)\n        // } else {\n        //     window.alert(\"Please connect to Metamask.\")\n        // }\n        // // Modern dapp browsers...\n        // if (window.ethereum) {\n        //     window.web3 = new Web3(window.ethereum)\n        //     try {\n        //         // Request account access if needed\n        //         await window.ethereum.enable()\n        //         // Acccounts now exposed\n        //         window.web3.eth.sendTransaction({/* ... */})\n        //     } catch (error) {\n        //         // User denied account access...\n        //         console.log(\"user denied account access....\");\n        //     }\n        // }\n        // // Legacy dapp browsers...\n        // else if (window.web3) {\n        //     this.web3Provider = window.web3.currentProvider\n        //     window.web3 = new Web3(window.web3.currentProvider)\n        //     // Acccounts always exposed\n        //     window.web3.eth.sendTransaction({/* ... */})\n        // }\n        // // Non-dapp browsers...\n        // else {\n        //     console.log('Non-Ethereum browser detected. You should consider trying MetaMask!')\n        // }\n    }\n\n    async loadAccount() {\n        this.account = window.web3.eth.accounts[0]\n        console.log(this.account)\n    }\n\n    async loadContract() {\n        const msgList = BarData;\n        //console.log(\"Msg LIST\")\n        //console.log(msgList);\n        // truffle contract - JS representation of a smart contract\n        this.contracts.Bar = TruffleContract(msgList)\n        this.contracts.Bar.setProvider(this.web3Provider)\n\n        // get smart contract values from blockchain\n        this.msgList = await this.contracts.Bar.deployed().catch((error) => console.log(error))\n        console.log(this.msgList);\n        console.log(\"done\");\n    }\n\n    async renderMsgs() {\n        // Load msg count from blockchain\n        const msgCount = await this.msgList.msgCount()\n        //const $msgTemplate = $('.msgTemplate')\n\n        // Render each message with a new message template\n        for (var i = 1; i <= msgCount; i++) {\n            // truffle contracts return an array\n            const msg = await this.msgList.messages(i)\n            const msgID = msg[0].toNumber()\n            const content = msg[1]\n            console.log(msgID)\n            console.log(content)\n        }\n    }\n\n    async createMessage(content) {\n        //this.setLoading(true)\n        console.log(content);\n        await this.msgList.createMessage(content)\n        this.renderMsgs();\n        window.location.reload()\n    }\n\n}\nconst Bar_app = {\n    loading: false,\n    contracts: {},\n\n    load: async () => {\n        await Bar_app.loadWeb3() // load library to connect to blockchain\n        await Bar_app.loadAccount()\n        await Bar_app.loadContract()\n        await Bar_app.render()\n    },\n\n    // https://medium.com/metamask/https-medium-com-metamask-breaking-change-injecting-web3-7722797916a8\n    // connect blockchain to browser\n    loadWeb3: async () => {\n        if (typeof window.web3 !== 'undefined') {\n            Bar_app.web3Provider = window.web3.currentProvider\n            window.web3 = new Web3(window.web3.currentProvider)\n        } else {\n            window.alert(\"Please connect to Metamask.\")\n        }\n        // Modern dapp browsers...\n        if (window.ethereum) {\n            window.web3 = new Web3(window.ethereum)\n            try {\n                // Request account access if needed\n                await window.ethereum.enable()\n                // Acccounts now exposed\n                window.web3.eth.sendTransaction({/* ... */})\n            } catch (error) {\n                // User denied account access...\n            }\n        }\n        // Legacy dapp browsers...\n        else if (window.web3) {\n            Bar_app.web3Provider = window.web3.currentProvider\n            window.web3 = new Web3(window.web3.currentProvider)\n            // Acccounts always exposed\n            window.web3.eth.sendTransaction({/* ... */})\n        }\n        // Non-dapp browsers...\n        else {\n            console.log('Non-Ethereum browser detected. You should consider trying MetaMask!')\n        }\n    },\n    // end https://medium.com/metamask/https-medium-com-metamask-breaking-change-injecting-web3-7722797916a8\n\n    loadAccount: async () => {\n        Bar_app.account = window.web3.eth.accounts[0]\n        console.log(Bar_app.account)\n    },\n\n    loadContract: async () => {\n        const msgList = BarData;\n        console.log(\"Msg LIST\")\n        console.log(msgList);\n        // truffle contract - JS representation of a smart contract\n        Bar_app.contracts.Bar = TruffleContract(msgList)\n        Bar_app.contracts.Bar.setProvider(Bar_app.web3Provider)\n\n        // get smart contract values from blockchain\n        Bar_app.msgList = await Bar_app.contracts.Bar.deployed()\n    },\n\n    renderMsgs: async () => {\n        // Load msg count from blockchain\n        const msgCount = await Bar_app.msgList.msgCount()\n        //const $msgTemplate = $('.msgTemplate')\n\n        // Render each message with a new message template\n        for (var i = 1; i <= msgCount; i++) {\n            // truffle contracts return an array\n            const msg = await Bar_app.msgList.messages(i)\n            const msgID = msg[0].toNumber()\n            const content = msg[1]\n            console.log(msgID)\n            console.log(content)\n\n            // Create the html for the task\n            //const $newMsgTemplate = $msgTemplate.clone()\n            //$newMsgTemplate.find('.content').html(content)\n            //$newMsgTemplate.find('input')\n                            //.prop('name', msgID)\n                            //.prop('checked', taskCompleted)\n                            //.on('click', Bar_app.toggleCompleted)\n\n            //$('msgList').append($newMsgTemplate)\n\n            // Show the message\n            //$newMsgTemplate.show()\n        }\n\n        \n    },\n\n    render: async () => {\n        if (Bar_app.loading) {\n            return\n        }\n        Bar_app.setLoading(true)\n\n       // $('#account').html(Bar_app.account)\n        await Bar_app.renderMsgs()\n\n        Bar_app.setLoading(false)\n    },\n\n    createMessage: async (content) => {\n        Bar_app.setLoading(true)\n        console.log(content);\n        //const content = $('#newMsg').val()\n        await Bar_app.msgList.createMessage(content)\n        Bar_app.renderMsgs();\n        window.location.reload()\n    },\n\n    setLoading: (boolean) => {\n        Bar_app.loading = boolean\n        //const loader = $('#loader')\n        //const content = $('#content')\n        // if (boolean) {\n        //     loader.show()\n        //     content.hide()\n        // } else {\n        //     loader.hide()\n        //     content.show()\n        // }\n    }\n}\n\n// $(() => {\n//     $(window).load(() => {\n//         bar_app.load()\n//     })\n// })\n//Bar_app.load();\n\nexport default new Blockchain();"]},"metadata":{},"sourceType":"module"}