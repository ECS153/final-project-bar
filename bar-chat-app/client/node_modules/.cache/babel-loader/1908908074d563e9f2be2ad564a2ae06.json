{"ast":null,"code":"import Web3 from 'web3';\nimport TruffleContract from 'truffle-contract';\nimport BarData from '../build/contracts/Bar.json'; // let BarJSON = require(\n// const fs = require('fs')\n// let BarData = fs.readFileSync('./build/contracts/Bar.json')\n\nclass Blockchain {\n  constructor() {\n    this.loading = false;\n    this.contracts = {};\n    this.web3Provider = null;\n    this.msgList = null;\n    this.load = this.load.bind(this);\n    this.loadWeb3 = this.loadWeb3.bind(this);\n    this.loadAccount = this.loadAccount.bind(this);\n    this.loadContract = this.loadContract.bind(this);\n    this.renderMsgs = this.renderMsgs.bind(this);\n    this.createMessage = this.createMessage.bind(this);\n  }\n\n  async load() {\n    await this.loadWeb3();\n    await this.loadAccount();\n    await this.loadContract(); //await this.render();\n  } // https://medium.com/metamask/https-medium-com-metamask-breaking-change-injecting-web3-7722797916a8\n  // connect blockchain to browser\n\n\n  async loadWeb3() {\n    if (typeof window.web3 !== 'undefined') {\n      this.web3Provider = window.web3.currentProvider;\n      window.web3 = new Web3(window.web3.currentProvider);\n    } else {\n      window.alert(\"Please connect to Metamask.\");\n    }\n\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n\n      try {\n        window.ethereum.enable().then(function () {\n          // User has allowed account access to DApp...\n          console.log(\"account okay\");\n        });\n      } catch (e) {\n        // User has denied account access to DApp...\n        console.log(\"account denied\");\n      }\n    } // Legacy DApp Browsers\n    else if (window.web3) {\n        window.web3 = new Web3(window.web3.currentProvider);\n      } // Non-DApp Browsers\n      else {\n          alert('You have to install MetaMask !');\n        }\n  }\n\n  async loadAccount() {\n    window.web3.defaultAccount = window.web3.eth.accounts[0];\n    this.account = window.web3.eth.accounts[0];\n    console.log(this.account);\n  }\n\n  async loadContract() {\n    const msgList = BarData; //console.log(\"Msg LIST\")\n    //console.log(msgList);\n    // truffle contract - JS representation of a smart contract\n\n    this.contracts.Bar = TruffleContract(msgList);\n    this.contracts.Bar.setProvider(this.web3Provider); // get smart contract values from blockchain\n\n    this.msgList = await this.contracts.Bar.deployed().catch(error => console.log(error));\n    console.log(this.msgList);\n    console.log(\"done\");\n  }\n\n  async renderMsgs() {\n    // Load msg count from blockchain\n    const msgCount = await this.msgList.msgCount(); //const $msgTemplate = $('.msgTemplate')\n    // Render each message with a new message template\n\n    for (var i = 1; i <= msgCount; i++) {\n      // truffle contracts return an array\n      const msg = await this.msgList.messages(i);\n      const msgID = msg[0].toNumber();\n      const content = msg[1];\n      console.log(msgID);\n      console.log(content);\n    }\n  }\n\n  async createMessage(content) {\n    console.log(content);\n    console.log(this.msgList);\n    await this.msgList.createMessage(\"johnny sins\").catch(error => console.log(error));\n    console.log(this.msgList);\n    this.renderMsgs(); //window.location.reload()\n  }\n\n}\n\nexport default new Blockchain();","map":{"version":3,"sources":["/Users/vsiow/Documents/UCD/S2020/final-project-bar/bar-chat-app/client/src/eth-bar/src/blockchain.js"],"names":["Web3","TruffleContract","BarData","Blockchain","constructor","loading","contracts","web3Provider","msgList","load","bind","loadWeb3","loadAccount","loadContract","renderMsgs","createMessage","window","web3","currentProvider","alert","ethereum","enable","then","console","log","e","defaultAccount","eth","accounts","account","Bar","setProvider","deployed","catch","error","msgCount","i","msg","messages","msgID","toNumber","content"],"mappings":"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","sourcesContent":["import Web3 from 'web3';  \nimport TruffleContract from 'truffle-contract' ;\nimport BarData from '../build/contracts/Bar.json'\n\n// let BarJSON = require(\n// const fs = require('fs')\n// let BarData = fs.readFileSync('./build/contracts/Bar.json')\n\nclass Blockchain {\n    constructor() {\n        this.loading = false;\n        this.contracts = {};\n        this.web3Provider = null;\n        this.msgList = null;\n        this.load = this.load.bind(this);\n        this.loadWeb3 = this.loadWeb3.bind(this);\n        this.loadAccount = this.loadAccount.bind(this);\n        this.loadContract = this.loadContract.bind(this);\n        this.renderMsgs = this.renderMsgs.bind(this);\n        this.createMessage = this.createMessage.bind(this);\n    }\n\n    async load() {\n        await this.loadWeb3();\n        await this.loadAccount();\n        await this.loadContract();\n        //await this.render();\n    }\n    // https://medium.com/metamask/https-medium-com-metamask-breaking-change-injecting-web3-7722797916a8\n    // connect blockchain to browser\n    async loadWeb3() {\n\n        if (typeof window.web3 !== 'undefined') {\n            this.web3Provider = window.web3.currentProvider\n            window.web3 = new Web3(window.web3.currentProvider)\n        } else {\n            window.alert(\"Please connect to Metamask.\")\n        }\n\n        if (window.ethereum) {\n            window.web3 = new Web3(window.ethereum);\n            try { \n                window.ethereum.enable().then(function() {\n                // User has allowed account access to DApp...\n                console.log(\"account okay\")\n            });\n            } catch(e) {\n                // User has denied account access to DApp...\n                console.log(\"account denied\")\n            }\n        }\n        // Legacy DApp Browsers\n        else if (window.web3) {\n            window.web3 = new Web3(window.web3.currentProvider);\n        }\n        // Non-DApp Browsers\n        else {\n            alert('You have to install MetaMask !');\n        }\n    }\n\n    async loadAccount() {\n        window.web3.defaultAccount = window.web3.eth.accounts[0]\n        this.account = window.web3.eth.accounts[0]\n        console.log(this.account)\n    }\n\n    async loadContract() {\n        const msgList = BarData;\n        //console.log(\"Msg LIST\")\n        //console.log(msgList);\n        // truffle contract - JS representation of a smart contract\n        this.contracts.Bar = TruffleContract(msgList)\n        this.contracts.Bar.setProvider(this.web3Provider)\n\n        // get smart contract values from blockchain\n        this.msgList = await this.contracts.Bar.deployed().catch((error) => console.log(error))\n        console.log(this.msgList);\n        console.log(\"done\");\n    }\n\n    async renderMsgs() {\n        // Load msg count from blockchain\n        const msgCount = await this.msgList.msgCount()\n        //const $msgTemplate = $('.msgTemplate')\n\n        // Render each message with a new message template\n        for (var i = 1; i <= msgCount; i++) {\n            // truffle contracts return an array\n            const msg = await this.msgList.messages(i)\n            const msgID = msg[0].toNumber()\n            const content = msg[1]\n            console.log(msgID)\n            console.log(content)\n        }\n    }\n\n    async createMessage(content) {\n\n        console.log(content);\n        console.log(this.msgList)\n        await this.msgList.createMessage(\"johnny sins\").catch((error) => console.log(error))\n        console.log(this.msgList)\n        this.renderMsgs();\n        //window.location.reload()\n    }\n\n}\n\nexport default new Blockchain();"]},"metadata":{},"sourceType":"module"}