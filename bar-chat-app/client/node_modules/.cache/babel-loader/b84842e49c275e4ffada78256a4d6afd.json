{"ast":null,"code":"import Web3 from 'web3';\nimport TruffleContract from 'truffle-contract';\nimport BarData from '../build/contracts/Bar.json'; // let BarJSON = require(\n// const fs = require('fs')\n// let BarData = fs.readFileSync('./build/contracts/Bar.json')\n\nclass Blockchain {\n  constructor() {\n    this.loading = false;\n    this.contracts = {};\n    this.web3Provider = null;\n    this.msgList = null;\n    this.load = this.load.bind(this);\n    this.loadWeb3 = this.loadWeb3.bind(this);\n    this.loadAccount = this.loadAccount.bind(this);\n    this.loadContract = this.loadContract.bind(this);\n    this.renderMsgs = this.renderMsgs.bind(this);\n    this.createMessage = this.createMessage.bind(this);\n    this.BarChat = null;\n  }\n\n  async load() {\n    await this.loadWeb3();\n    await this.loadAccount();\n    await this.loadContract(); //await this.render();\n  } // https://medium.com/metamask/https-medium-com-metamask-breaking-change-injecting-web3-7722797916a8\n  // connect blockchain to browser\n\n\n  async loadWeb3() {\n    if (typeof window.web3 !== 'undefined') {\n      this.web3Provider = window.web3.currentProvider;\n      window.web3 = new Web3(window.web3.currentProvider);\n      this.account = window.web3.eth.accounts[0];\n      let BarChatContract = window.web3.eth.contract([{\n        \"constant\": false,\n        \"inputs\": [{\n          \"name\": \"_content\",\n          \"type\": \"string\"\n        }],\n        \"name\": \"createMessage\",\n        \"outputs\": [],\n        \"payable\": false,\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n      }]);\n      console.log(BarChatContract);\n      this.BarChat = BarChatContract.at(\"0xa3Bb156fa5c332177767CE1ac7b690C7FbCaB76a\");\n    } else {\n      window.alert(\"Please connect to Metamask.\");\n    }\n\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n\n      try {\n        window.ethereum.enable().then(function () {\n          // User has allowed account access to DApp...\n          console.log(\"account okay\");\n        });\n      } catch (e) {\n        // User has denied account access to DApp...\n        console.log(\"account denied\");\n      }\n    } // Legacy DApp Browsers\n    else if (window.web3) {\n        window.web3 = new Web3(window.web3.currentProvider);\n      } // Non-DApp Browsers\n      else {\n          alert('You have to install MetaMask !');\n        }\n  }\n\n  async loadAccount() {\n    window.web3.defaultAccount = window.web3.eth.accounts[0];\n    console.log(this.account);\n  }\n\n  async loadContract() {\n    //const msgList = BarData;\n    //console.log(\"Msg LIST\")\n    //console.log(msgList);\n    // truffle contract - JS representation of a smart contract\n    //this.contracts.Bar = TruffleContract(msgList)\n    //this.contracts.Bar.setProvider(this.web3Provider)\n    //let bar = this.contracts.Bar.at('0xa3Bb156fa5c332177767CE1ac7b690C7FbCaB76a')\n    // get smart contract values from blockchain\n    //this.msgList = await this.BarChat.deployed().catch((error) => console.log(error))\n    console.log(this.BarChat); //console.log(this.msgList);\n\n    console.log(\"done\");\n  }\n\n  async renderMsgs() {// Load msg count from blockchain\n    //const msgCount = await this.msgList.msgCount()\n    //const $msgTemplate = $('.msgTemplate')\n    // Render each message with a new message template\n    // for (var i = 1; i <= msgCount; i++) {\n    //     // truffle contracts return an array\n    //     const msg = await this.msgList.messages(i)\n    //     const msgID = msg[0].toNumber()\n    //     const content = msg[1]\n    //     console.log(msgID)\n    //     console.log(content)\n    // }\n  }\n\n  async createMessage(content) {\n    console.log(window.web3.currentProvider);\n    console.log(this.web3Provider);\n    await this.BarChat.createMessage(content).catch(error => console.log(error)); //this.renderMsgs();\n    //window.location.reload()\n  }\n\n}\n\nexport default new Blockchain();","map":{"version":3,"sources":["/Users/vsiow/Documents/UCD/S2020/final-project-bar/bar-chat-app/client/src/eth-bar/src/blockchain.js"],"names":["Web3","TruffleContract","BarData","Blockchain","constructor","loading","contracts","web3Provider","msgList","load","bind","loadWeb3","loadAccount","loadContract","renderMsgs","createMessage","BarChat","window","web3","currentProvider","account","eth","accounts","BarChatContract","contract","console","log","at","alert","ethereum","enable","then","e","defaultAccount","content","catch","error"],"mappings":"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","sourcesContent":["import Web3 from 'web3';  \nimport TruffleContract from 'truffle-contract' ;\nimport BarData from '../build/contracts/Bar.json'\n\n// let BarJSON = require(\n// const fs = require('fs')\n// let BarData = fs.readFileSync('./build/contracts/Bar.json')\n\nclass Blockchain {\n    constructor() {\n        this.loading = false;\n        this.contracts = {};\n        this.web3Provider = null;\n        this.msgList = null;\n        this.load = this.load.bind(this);\n        this.loadWeb3 = this.loadWeb3.bind(this);\n        this.loadAccount = this.loadAccount.bind(this);\n        this.loadContract = this.loadContract.bind(this);\n        this.renderMsgs = this.renderMsgs.bind(this);\n        this.createMessage = this.createMessage.bind(this);\n        this.BarChat = null;\n    }\n\n    async load() {\n        await this.loadWeb3();\n        await this.loadAccount();\n        await this.loadContract();\n        //await this.render();\n    }\n    // https://medium.com/metamask/https-medium-com-metamask-breaking-change-injecting-web3-7722797916a8\n    // connect blockchain to browser\n    async loadWeb3() {\n\n        if (typeof window.web3 !== 'undefined') {\n            this.web3Provider = window.web3.currentProvider\n            window.web3 = new Web3(window.web3.currentProvider)\n            this.account = window.web3.eth.accounts[0]\n\n            let BarChatContract = window.web3.eth.contract([\n                {\n                    \"constant\": false,\n                    \"inputs\": [\n                        {\n                            \"name\": \"_content\",\n                            \"type\": \"string\"\n                        }\n                    ],\n                    \"name\": \"createMessage\",\n                    \"outputs\": [\n                        \n                    ],\n                    \"payable\": false,\n                    \"stateMutability\": \"nonpayable\",\n                    \"type\": \"function\"\n                }\n            ]);\n            console.log(BarChatContract)\n\n            this.BarChat = BarChatContract.at(\"0xa3Bb156fa5c332177767CE1ac7b690C7FbCaB76a\")\n        } else {\n            window.alert(\"Please connect to Metamask.\")\n        }\n\n        if (window.ethereum) {\n            window.web3 = new Web3(window.ethereum);\n            try { \n                window.ethereum.enable().then(function() {\n                // User has allowed account access to DApp...\n                console.log(\"account okay\")\n            });\n            } catch(e) {\n                // User has denied account access to DApp...\n                console.log(\"account denied\")\n            }\n        }\n        // Legacy DApp Browsers\n        else if (window.web3) {\n            window.web3 = new Web3(window.web3.currentProvider);\n        }\n        // Non-DApp Browsers\n        else {\n            alert('You have to install MetaMask !');\n        }\n    }\n\n    async loadAccount() {\n        window.web3.defaultAccount = window.web3.eth.accounts[0]\n        console.log(this.account)\n    }\n\n    async loadContract() {\n        //const msgList = BarData;\n        //console.log(\"Msg LIST\")\n        //console.log(msgList);\n        // truffle contract - JS representation of a smart contract\n        //this.contracts.Bar = TruffleContract(msgList)\n        //this.contracts.Bar.setProvider(this.web3Provider)\n        //let bar = this.contracts.Bar.at('0xa3Bb156fa5c332177767CE1ac7b690C7FbCaB76a')\n\n        // get smart contract values from blockchain\n        //this.msgList = await this.BarChat.deployed().catch((error) => console.log(error))\n        console.log(this.BarChat);\n        //console.log(this.msgList);\n        console.log(\"done\");\n    }\n\n    async renderMsgs() {\n        // Load msg count from blockchain\n        //const msgCount = await this.msgList.msgCount()\n        //const $msgTemplate = $('.msgTemplate')\n\n        // Render each message with a new message template\n        // for (var i = 1; i <= msgCount; i++) {\n        //     // truffle contracts return an array\n        //     const msg = await this.msgList.messages(i)\n        //     const msgID = msg[0].toNumber()\n        //     const content = msg[1]\n        //     console.log(msgID)\n        //     console.log(content)\n        // }\n    }\n\n    async createMessage(content) {\n\n        console.log(window.web3.currentProvider)\n        console.log(this.web3Provider)\n        await this.BarChat.createMessage(content).catch((error) => console.log(error))\n        //this.renderMsgs();\n        //window.location.reload()\n    }\n\n}\n\nexport default new Blockchain();"]},"metadata":{},"sourceType":"module"}