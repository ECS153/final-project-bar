{"ast":null,"code":"var TruffleError = require(\"truffle-error\");\n\nvar inherits = require(\"util\").inherits;\n\nvar web3 = require(\"web3\");\n\ninherits(StatusError, TruffleError);\nvar defaultGas = 90000;\n\nfunction StatusError(args, tx, receipt) {\n  var message;\n  var gasLimit = parseInt(args.gas) || defaultGas;\n\n  if (receipt.gasUsed === gasLimit) {\n    message = \"Transaction: \" + tx + \" exited with an error (status 0) after consuming all gas.\\n\" + \"Please check that the transaction:\\n\" + \"    - satisfies all conditions set by Solidity `assert` statements.\\n\" + \"    - has enough gas to execute the full transaction.\\n\" + \"    - does not trigger an invalid opcode by other means (ex: accessing an array out of bounds).\";\n  } else {\n    message = \"Transaction: \" + tx + \" exited with an error (status 0).\\n\" + \"Please check that the transaction:\\n\" + \"    - satisfies all conditions set by Solidity `require` statements.\\n\" + \"    - does not trigger a Solidity `revert` statement.\\n\";\n  }\n\n  StatusError.super_.call(this, message);\n  this.tx = tx;\n  this.receipt = receipt;\n}\n\nmodule.exports = StatusError;","map":{"version":3,"sources":["/Users/vsiow/Documents/UCD/S2020/final-project-bar/bar-chat-app/client/node_modules/truffle-contract/statuserror.js"],"names":["TruffleError","require","inherits","web3","StatusError","defaultGas","args","tx","receipt","message","gasLimit","parseInt","gas","gasUsed","super_","call","module","exports"],"mappings":"AAAA,IAAIA,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AACA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,MAAD,CAAP,CAAgBC,QAA/B;;AACA,IAAIC,IAAI,GAAGF,OAAO,CAAC,MAAD,CAAlB;;AAEAC,QAAQ,CAACE,WAAD,EAAcJ,YAAd,CAAR;AAEA,IAAIK,UAAU,GAAG,KAAjB;;AAEA,SAASD,WAAT,CAAqBE,IAArB,EAA2BC,EAA3B,EAA+BC,OAA/B,EAAwC;AACtC,MAAIC,OAAJ;AACA,MAAIC,QAAQ,GAAGC,QAAQ,CAACL,IAAI,CAACM,GAAN,CAAR,IAAsBP,UAArC;;AAEA,MAAGG,OAAO,CAACK,OAAR,KAAoBH,QAAvB,EAAgC;AAE9BD,IAAAA,OAAO,GAAG,kBAAkBF,EAAlB,GAAuB,6DAAvB,GACR,sCADQ,GAER,uEAFQ,GAGR,yDAHQ,GAIR,iGAJF;AAMD,GARD,MAQO;AAELE,IAAAA,OAAO,GAAG,kBAAkBF,EAAlB,GAAuB,qCAAvB,GACR,sCADQ,GAER,wEAFQ,GAGR,yDAHF;AAID;;AAEDH,EAAAA,WAAW,CAACU,MAAZ,CAAmBC,IAAnB,CAAwB,IAAxB,EAA8BN,OAA9B;AACA,OAAKF,EAAL,GAAUA,EAAV;AACA,OAAKC,OAAL,GAAeA,OAAf;AACD;;AAEDQ,MAAM,CAACC,OAAP,GAAiBb,WAAjB","sourcesContent":["var TruffleError = require(\"truffle-error\");\nvar inherits = require(\"util\").inherits;\nvar web3 = require(\"web3\");\n\ninherits(StatusError, TruffleError);\n\nvar defaultGas = 90000;\n\nfunction StatusError(args, tx, receipt) {\n  var message;\n  var gasLimit = parseInt(args.gas) || defaultGas;\n\n  if(receipt.gasUsed === gasLimit){\n\n    message = \"Transaction: \" + tx + \" exited with an error (status 0) after consuming all gas.\\n\" +\n      \"Please check that the transaction:\\n\" +\n      \"    - satisfies all conditions set by Solidity `assert` statements.\\n\" +\n      \"    - has enough gas to execute the full transaction.\\n\" +\n      \"    - does not trigger an invalid opcode by other means (ex: accessing an array out of bounds).\";\n\n  } else {\n\n    message = \"Transaction: \" + tx + \" exited with an error (status 0).\\n\" +\n      \"Please check that the transaction:\\n\" +\n      \"    - satisfies all conditions set by Solidity `require` statements.\\n\" +\n      \"    - does not trigger a Solidity `revert` statement.\\n\";\n  }\n\n  StatusError.super_.call(this, message);\n  this.tx = tx;\n  this.receipt = receipt;\n}\n\nmodule.exports = StatusError;"]},"metadata":{},"sourceType":"script"}