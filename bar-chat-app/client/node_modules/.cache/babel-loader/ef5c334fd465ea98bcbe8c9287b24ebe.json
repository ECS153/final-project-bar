{"ast":null,"code":"// import Web3 from 'web3';\nimport TruffleContract from 'truffle-contract';\nexport const App = {\n  loading: false,\n  contracts: {},\n  load: async () => {\n    await App.loadWeb3(); // load library to connect to blockchain\n\n    await App.loadAccount();\n    await App.loadContract();\n    await App.render();\n  },\n  // https://medium.com/metamask/https-medium-com-metamask-breaking-change-injecting-web3-7722797916a8\n  // connect blockchain to browser\n  loadWeb3: async () => {\n    if (typeof window.web3 !== 'undefined') {\n      App.web3Provider = window.web3.currentProvider;\n      window.web3 = new Web3(window.web3.currentProvider);\n    } else {\n      window.alert(\"Please connect to Metamask.\");\n    } // Modern dapp browsers...\n\n\n    if (window.ethereum) {\n      window.web3 = new Web3(ethereum);\n\n      try {\n        // Request account access if needed\n        await ethereum.enable(); // Acccounts now exposed\n\n        window.web3.eth.sendTransaction({\n          /* ... */\n        });\n      } catch (error) {// User denied account access...\n      }\n    } // Legacy dapp browsers...\n    else if (window.web3) {\n        App.web3Provider = window.web3.currentProvider;\n        window.web3 = new Web3(window.web3.currentProvider); // Acccounts always exposed\n\n        window.web3.eth.sendTransaction({\n          /* ... */\n        });\n      } // Non-dapp browsers...\n      else {\n          console.log('Non-Ethereum browser detected. You should consider trying MetaMask!');\n        }\n  },\n  // end https://medium.com/metamask/https-medium-com-metamask-breaking-change-injecting-web3-7722797916a8\n  loadAccount: async () => {\n    App.account = window.web3.eth.accounts[0];\n    console.log(App.account);\n  },\n  loadContract: async () => {\n    const msgList = await $.getJSON('Bar.json'); // truffle contract - JS representation of a smart contract\n\n    App.contracts.Bar = TruffleContract(msgList);\n    App.contracts.Bar.setProvider(App.web3Provider); // get smart contract values from blockchain\n\n    App.msgList = await App.contracts.Bar.deployed();\n  },\n  renderMsgs: async () => {\n    // Load msg count from blockchain\n    const msgCount = await App.msgList.msgCount(); //const $msgTemplate = $('.msgTemplate')\n    // Render each message with a new message template\n\n    for (var i = 1; i <= msgCount; i++) {\n      // truffle contracts return an array\n      const msg = await App.msgList.messages(i);\n      const msgID = msg[0].toNumber();\n      const content = msg[1];\n      console.log(msgID);\n      console.log(content); // Create the html for the task\n      // const $newMsgTemplate = $msgTemplate.clone()\n      // $newMsgTemplate.find('.content').html(content)\n      // $newMsgTemplate.find('input')\n      //                 .prop('name', msgID)\n      //                 //.prop('checked', taskCompleted)\n      //                 //.on('click', App.toggleCompleted)\n      // $('msgList').append($newMsgTemplate)\n      // // Show the message\n      // $newMsgTemplate.show()\n    }\n  },\n  render: async () => {\n    if (App.loading) {\n      return;\n    } //App.setLoading(true)\n    // $('#account').html(App.account)\n\n\n    await App.renderMsgs(); //App.setLoading(false)\n  },\n  createMessage: async content => {\n    //App.setLoading(true)\n    await App.msgList.createMessage(content);\n    window.location.reload();\n  } // setLoading: (boolean) => {\n  //     App.loading = boolean\n  //     const loader = $('#loader')\n  //     const content = $('#content')\n  //     if (boolean) {\n  //         loader.show()\n  //         content.hide()\n  //     } else {\n  //         loader.hide()\n  //         content.show()\n  //     }\n  // }\n\n}; // $(() => {\n//     $(window).load(() => {\n//         App.load()\n//     })\n// })","map":{"version":3,"sources":["/Users/vsiow/Documents/UCD/S2020/final-project-bar/bar-chat-app/client/src/eth-bar/src/app.js"],"names":["TruffleContract","App","loading","contracts","load","loadWeb3","loadAccount","loadContract","render","window","web3","web3Provider","currentProvider","Web3","alert","ethereum","enable","eth","sendTransaction","error","console","log","account","accounts","msgList","$","getJSON","Bar","setProvider","deployed","renderMsgs","msgCount","i","msg","messages","msgID","toNumber","content","createMessage","location","reload"],"mappings":"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","sourcesContent":["// import Web3 from 'web3';\nimport TruffleContract from 'truffle-contract';\n\nexport const App = {\n    loading: false,\n    contracts: {},\n\n    load: async () => {\n        await App.loadWeb3() // load library to connect to blockchain\n        await App.loadAccount()\n        await App.loadContract()\n        await App.render()\n    },\n\n    // https://medium.com/metamask/https-medium-com-metamask-breaking-change-injecting-web3-7722797916a8\n    // connect blockchain to browser\n    loadWeb3: async () => {\n        if (typeof window.web3 !== 'undefined') {\n            App.web3Provider = window.web3.currentProvider\n            window.web3 = new Web3(window.web3.currentProvider)\n        } else {\n            window.alert(\"Please connect to Metamask.\")\n        }\n        // Modern dapp browsers...\n        if (window.ethereum) {\n            window.web3 = new Web3(ethereum)\n            try {\n                // Request account access if needed\n                await ethereum.enable()\n                // Acccounts now exposed\n                window.web3.eth.sendTransaction({/* ... */})\n            } catch (error) {\n                // User denied account access...\n            }\n        }\n        // Legacy dapp browsers...\n        else if (window.web3) {\n            App.web3Provider = window.web3.currentProvider\n            window.web3 = new Web3(window.web3.currentProvider)\n            // Acccounts always exposed\n            window.web3.eth.sendTransaction({/* ... */})\n        }\n        // Non-dapp browsers...\n        else {\n            console.log('Non-Ethereum browser detected. You should consider trying MetaMask!')\n        }\n    },\n    // end https://medium.com/metamask/https-medium-com-metamask-breaking-change-injecting-web3-7722797916a8\n\n    loadAccount: async () => {\n        App.account = window.web3.eth.accounts[0]\n        console.log(App.account)\n    },\n\n    loadContract: async () => {\n        const msgList = await $.getJSON('Bar.json')\n        // truffle contract - JS representation of a smart contract\n        App.contracts.Bar = TruffleContract(msgList)\n        App.contracts.Bar.setProvider(App.web3Provider)\n\n        // get smart contract values from blockchain\n        App.msgList = await App.contracts.Bar.deployed()\n    },\n\n    renderMsgs: async () => {\n        // Load msg count from blockchain\n        const msgCount = await App.msgList.msgCount()\n        //const $msgTemplate = $('.msgTemplate')\n\n        // Render each message with a new message template\n        for (var i = 1; i <= msgCount; i++) {\n            // truffle contracts return an array\n            const msg = await App.msgList.messages(i)\n            const msgID = msg[0].toNumber()\n            const content = msg[1]\n            console.log(msgID)\n            console.log(content)\n\n            // Create the html for the task\n            // const $newMsgTemplate = $msgTemplate.clone()\n            // $newMsgTemplate.find('.content').html(content)\n            // $newMsgTemplate.find('input')\n            //                 .prop('name', msgID)\n            //                 //.prop('checked', taskCompleted)\n            //                 //.on('click', App.toggleCompleted)\n\n            // $('msgList').append($newMsgTemplate)\n\n            // // Show the message\n            // $newMsgTemplate.show()\n        }\n\n        \n    },\n\n    render: async () => {\n        if (App.loading) {\n            return\n        }\n        //App.setLoading(true)\n\n        // $('#account').html(App.account)\n        await App.renderMsgs()\n\n        //App.setLoading(false)\n    },\n\n    createMessage: async (content) => {\n        //App.setLoading(true)\n        await App.msgList.createMessage(content)\n        window.location.reload()\n    },\n\n    // setLoading: (boolean) => {\n    //     App.loading = boolean\n    //     const loader = $('#loader')\n    //     const content = $('#content')\n    //     if (boolean) {\n    //         loader.show()\n    //         content.hide()\n    //     } else {\n    //         loader.hide()\n    //         content.show()\n    //     }\n    // }\n}\n\n// $(() => {\n//     $(window).load(() => {\n//         App.load()\n//     })\n// })"]},"metadata":{},"sourceType":"module"}