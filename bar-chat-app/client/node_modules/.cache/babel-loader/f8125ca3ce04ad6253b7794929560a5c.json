{"ast":null,"code":"/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/** @file httpprovider.js\n * @authors:\n *   Marek Kotewicz <marek@ethdev.com>\n *   Marian Oancea <marian@ethdev.com>\n *   Fabian Vogelsteller <fabian@ethdev.com>\n * @date 2015\n */\nvar errors = require('./errors'); // workaround to use httpprovider in different envs\n// browser\n\n\nif (typeof window !== 'undefined' && window.XMLHttpRequest) {\n  XMLHttpRequest = window.XMLHttpRequest; // jshint ignore: line\n  // node\n} else {\n  XMLHttpRequest = require('xmlhttprequest').XMLHttpRequest; // jshint ignore: line\n}\n\nvar XHR2 = require('xhr2'); // jshint ignore: line\n\n/**\n * HttpProvider should be used to send rpc calls over http\n */\n\n\nvar HttpProvider = function (host, timeout, user, password, headers) {\n  this.host = host || 'http://localhost:8545';\n  this.timeout = timeout || 0;\n  this.user = user;\n  this.password = password;\n  this.headers = headers;\n};\n/**\n * Should be called to prepare new XMLHttpRequest\n *\n * @method prepareRequest\n * @param {Boolean} true if request should be async\n * @return {XMLHttpRequest} object\n */\n\n\nHttpProvider.prototype.prepareRequest = function (async) {\n  var request;\n\n  if (async) {\n    request = new XHR2();\n    request.timeout = this.timeout;\n  } else {\n    request = new XMLHttpRequest();\n  }\n\n  request.open('POST', this.host, async);\n\n  if (this.user && this.password) {\n    var auth = 'Basic ' + new Buffer(this.user + ':' + this.password).toString('base64');\n    request.setRequestHeader('Authorization', auth);\n  }\n\n  request.setRequestHeader('Content-Type', 'application/json');\n\n  if (this.headers) {\n    this.headers.forEach(function (header) {\n      request.setRequestHeader(header.name, header.value);\n    });\n  }\n\n  return request;\n};\n/**\n * Should be called to make sync request\n *\n * @method send\n * @param {Object} payload\n * @return {Object} result\n */\n\n\nHttpProvider.prototype.send = function (payload) {\n  var request = this.prepareRequest(false);\n\n  try {\n    request.send(JSON.stringify(payload));\n  } catch (error) {\n    throw errors.InvalidConnection(this.host);\n  }\n\n  var result = request.responseText;\n\n  try {\n    result = JSON.parse(result);\n  } catch (e) {\n    throw errors.InvalidResponse(request.responseText);\n  }\n\n  return result;\n};\n/**\n * Should be used to make async request\n *\n * @method sendAsync\n * @param {Object} payload\n * @param {Function} callback triggered on end with (err, result)\n */\n\n\nHttpProvider.prototype.sendAsync = function (payload, callback) {\n  var request = this.prepareRequest(true);\n\n  request.onreadystatechange = function () {\n    if (request.readyState === 4 && request.timeout !== 1) {\n      var result = request.responseText;\n      var error = null;\n\n      try {\n        result = JSON.parse(result);\n      } catch (e) {\n        error = errors.InvalidResponse(request.responseText);\n      }\n\n      callback(error, result);\n    }\n  };\n\n  request.ontimeout = function () {\n    callback(errors.ConnectionTimeout(this.timeout));\n  };\n\n  try {\n    request.send(JSON.stringify(payload));\n  } catch (error) {\n    callback(errors.InvalidConnection(this.host));\n  }\n};\n/**\n * Synchronously tries to make Http request\n *\n * @method isConnected\n * @return {Boolean} returns true if request haven't failed. Otherwise false\n */\n\n\nHttpProvider.prototype.isConnected = function () {\n  try {\n    this.send({\n      id: 9999999999,\n      jsonrpc: '2.0',\n      method: 'net_listening',\n      params: []\n    });\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\n\nmodule.exports = HttpProvider;","map":{"version":3,"sources":["/Users/vsiow/Documents/UCD/S2020/final-project-bar/bar-chat-app/client/node_modules/web3/lib/web3/httpprovider.js"],"names":["errors","require","window","XMLHttpRequest","XHR2","HttpProvider","host","timeout","user","password","headers","prototype","prepareRequest","async","request","open","auth","Buffer","toString","setRequestHeader","forEach","header","name","value","send","payload","JSON","stringify","error","InvalidConnection","result","responseText","parse","e","InvalidResponse","sendAsync","callback","onreadystatechange","readyState","ontimeout","ConnectionTimeout","isConnected","id","jsonrpc","method","params","module","exports"],"mappings":"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","sourcesContent":["/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** @file httpprovider.js\n * @authors:\n *   Marek Kotewicz <marek@ethdev.com>\n *   Marian Oancea <marian@ethdev.com>\n *   Fabian Vogelsteller <fabian@ethdev.com>\n * @date 2015\n */\n\nvar errors = require('./errors');\n\n// workaround to use httpprovider in different envs\n\n// browser\nif (typeof window !== 'undefined' && window.XMLHttpRequest) {\n  XMLHttpRequest = window.XMLHttpRequest; // jshint ignore: line\n// node\n} else {\n  XMLHttpRequest = require('xmlhttprequest').XMLHttpRequest; // jshint ignore: line\n}\n\nvar XHR2 = require('xhr2'); // jshint ignore: line\n\n/**\n * HttpProvider should be used to send rpc calls over http\n */\nvar HttpProvider = function (host, timeout, user, password, headers) {\n  this.host = host || 'http://localhost:8545';\n  this.timeout = timeout || 0;\n  this.user = user;\n  this.password = password;\n  this.headers = headers;\n};\n\n/**\n * Should be called to prepare new XMLHttpRequest\n *\n * @method prepareRequest\n * @param {Boolean} true if request should be async\n * @return {XMLHttpRequest} object\n */\nHttpProvider.prototype.prepareRequest = function (async) {\n  var request;\n\n  if (async) {\n    request = new XHR2();\n    request.timeout = this.timeout;\n  } else {\n    request = new XMLHttpRequest();\n  }\n\n  request.open('POST', this.host, async);\n  if (this.user && this.password) {\n    var auth = 'Basic ' + new Buffer(this.user + ':' + this.password).toString('base64');\n    request.setRequestHeader('Authorization', auth);\n  } request.setRequestHeader('Content-Type', 'application/json');\n  if(this.headers) {\n      this.headers.forEach(function(header) {\n          request.setRequestHeader(header.name, header.value);\n      });\n  }\n  return request;\n};\n\n/**\n * Should be called to make sync request\n *\n * @method send\n * @param {Object} payload\n * @return {Object} result\n */\nHttpProvider.prototype.send = function (payload) {\n  var request = this.prepareRequest(false);\n\n  try {\n    request.send(JSON.stringify(payload));\n  } catch (error) {\n    throw errors.InvalidConnection(this.host);\n  }\n\n  var result = request.responseText;\n\n  try {\n    result = JSON.parse(result);\n  } catch (e) {\n    throw errors.InvalidResponse(request.responseText);\n  }\n\n  return result;\n};\n\n/**\n * Should be used to make async request\n *\n * @method sendAsync\n * @param {Object} payload\n * @param {Function} callback triggered on end with (err, result)\n */\nHttpProvider.prototype.sendAsync = function (payload, callback) {\n  var request = this.prepareRequest(true);\n\n  request.onreadystatechange = function () {\n    if (request.readyState === 4 && request.timeout !== 1) {\n      var result = request.responseText;\n      var error = null;\n\n      try {\n        result = JSON.parse(result);\n      } catch (e) {\n        error = errors.InvalidResponse(request.responseText);\n      }\n\n      callback(error, result);\n    }\n  };\n\n  request.ontimeout = function () {\n    callback(errors.ConnectionTimeout(this.timeout));\n  };\n\n  try {\n    request.send(JSON.stringify(payload));\n  } catch (error) {\n    callback(errors.InvalidConnection(this.host));\n  }\n};\n\n/**\n * Synchronously tries to make Http request\n *\n * @method isConnected\n * @return {Boolean} returns true if request haven't failed. Otherwise false\n */\nHttpProvider.prototype.isConnected = function () {\n  try {\n    this.send({\n      id: 9999999999,\n      jsonrpc: '2.0',\n      method: 'net_listening',\n      params: []\n    });\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\n\nmodule.exports = HttpProvider;\n"]},"metadata":{},"sourceType":"script"}